#!/usr/bin/env python

import sys
import rospy
from qt_robot_interface.srv import *  # Importing necessary service modules
from qt_vosk_app.srv import *
import wikipediaapi  # Library for interacting with Wikipedia
from audio_common_msgs.msg import AudioData


def search_wikipedia(key_word):
    # Create an instance of WikipediaAPI for the French language
    wiki = wikipediaapi.Wikipedia('fr')
    page = wiki.page(key_word)
    
    if page.exists():
        summary = page.summary  # Full summary of the page

        # Split the summary into sentences using punctuation
        sentences = []
        current_sentence = ""
        punctuations = {".", "!", "?"}  # Common punctuations to end a sentence

        for char in summary:
            current_sentence += char
            if char in punctuations:
                sentences.append(current_sentence.strip())
                current_sentence = ""

        # Limit the number of sentences
        max_sentences = 4
        selected_sentences = sentences[:max_sentences]

        result = ' '.join(selected_sentences)  # Combine the sentences into a single text
        return result
    else:
        return None


if __name__ == '__main__':
    # ROS node initialization
    rospy.init_node('qt_robot_speech')
    rospy.loginfo("Hi") 

    speechSay = rospy.ServiceProxy('/qt_robot/speech/say', speech_say)
    recognize = rospy.ServiceProxy('/qt_robot/speech/recognize', speech_recognize)
    rospy.wait_for_service('/qt_robot/speech/say')
    rospy.wait_for_service('/qt_robot/speech/recognize')
   
    # Main loop for performing multiple searches
    while True:
        # Ask the user if they want to perform a search
        speechSay("Bonjour ! Tu veux faire une recherche ? ")
        resp = recognize("fr_FR", [], 0)
        rospy.loginfo(resp.transcript)
        rospy.loginfo("I got: %s", resp.transcript)

        if "d'accord" in resp.transcript:
            # Ask for the keyword to search
            speechSay("Donne-moi un mot clé")
            resp_kw = recognize("fr_FR", [], 15)
            key_word = resp_kw.transcript
            rospy.loginfo(key_word)

            # Perform the search on Wikipedia
            result = search_wikipedia(key_word)
            if result is not None:
                print(result)
                speechSay("Voici ce que j'ai trouvé sur Wikipedia : {}".format(result))
            else:
                speechSay("Aucun résultat trouvé sur Wikipedia pour la recherche : {}".format(key_word))
        else:
            # If the user indicates they don't want to perform a search, break out of the loop
            break

    rospy.loginfo("Finished!")

